// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, formDataBodySerializer } from './client';
import type { SaveFeedbackData, SaveFeedbackResponses, FindAllBooksData, FindAllBooksResponses, SaveData, SaveResponses, UploadBookCoverPictureData, UploadBookCoverPictureResponses, BorrowBookData, BorrowBookResponses, RegisterData, RegisterResponses, AuthenticateData, AuthenticateResponses, UpdateShareableStatusData, UpdateShareableStatusResponses, ReturnBorrowBookData, ReturnBorrowBookResponses, ApproveReturnBorrowBookData, ApproveReturnBorrowBookResponses, UpdateArchivedStatusData, UpdateArchivedStatusResponses, FindAllFeedbacksByBookData, FindAllFeedbacksByBookResponses, FindBookByIdData, FindBookByIdResponses, FindAllReturnedBooksData, FindAllReturnedBooksResponses, FindAllBooksByOwnerData, FindAllBooksByOwnerResponses, FindAllBorrowedBooksData, FindAllBorrowedBooksResponses, ActivateData, ActivateResponses } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export class Feedback {
    public static saveFeedback<ThrowOnError extends boolean = false>(options: Options<SaveFeedbackData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<SaveFeedbackResponses, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/feedbacks',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static findAllFeedbacksByBook<ThrowOnError extends boolean = false>(options: Options<FindAllFeedbacksByBookData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<FindAllFeedbacksByBookResponses, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/feedbacks/feedback/{book-id}',
            ...options
        });
    }
}

export class Book {
    public static findAllBooks<ThrowOnError extends boolean = false>(options?: Options<FindAllBooksData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<FindAllBooksResponses, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/books',
            ...options
        });
    }
    
    public static save<ThrowOnError extends boolean = false>(options: Options<SaveData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<SaveResponses, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/books',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static uploadBookCoverPicture<ThrowOnError extends boolean = false>(options: Options<UploadBookCoverPictureData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<UploadBookCoverPictureResponses, unknown, ThrowOnError>({
            ...formDataBodySerializer,
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/books/cover/{book-id}',
            ...options,
            headers: {
                'Content-Type': null,
                ...options.headers
            }
        });
    }
    
    public static borrowBook<ThrowOnError extends boolean = false>(options: Options<BorrowBookData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<BorrowBookResponses, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/books/borrow/{book-id}',
            ...options
        });
    }
    
    public static updateShareableStatus<ThrowOnError extends boolean = false>(options: Options<UpdateShareableStatusData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).patch<UpdateShareableStatusResponses, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/books/shareable/{book-id}',
            ...options
        });
    }
    
    public static returnBorrowBook<ThrowOnError extends boolean = false>(options: Options<ReturnBorrowBookData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).patch<ReturnBorrowBookResponses, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/books/borrow/return/{book-id}',
            ...options
        });
    }
    
    public static approveReturnBorrowBook<ThrowOnError extends boolean = false>(options: Options<ApproveReturnBorrowBookData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).patch<ApproveReturnBorrowBookResponses, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/books/borrow/return/approve/{book-id}',
            ...options
        });
    }
    
    public static updateArchivedStatus<ThrowOnError extends boolean = false>(options: Options<UpdateArchivedStatusData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).patch<UpdateArchivedStatusResponses, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/books/archived/{book-id}',
            ...options
        });
    }
    
    public static findBookById<ThrowOnError extends boolean = false>(options: Options<FindBookByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<FindBookByIdResponses, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/books/{book-id}',
            ...options
        });
    }
    
    public static findAllReturnedBooks<ThrowOnError extends boolean = false>(options?: Options<FindAllReturnedBooksData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<FindAllReturnedBooksResponses, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/books/returned',
            ...options
        });
    }
    
    public static findAllBooksByOwner<ThrowOnError extends boolean = false>(options?: Options<FindAllBooksByOwnerData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<FindAllBooksByOwnerResponses, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/books/owner',
            ...options
        });
    }
    
    public static findAllBorrowedBooks<ThrowOnError extends boolean = false>(options?: Options<FindAllBorrowedBooksData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<FindAllBorrowedBooksResponses, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/books/borrowed',
            ...options
        });
    }
}

export class Authentication {
    public static register<ThrowOnError extends boolean = false>(options: Options<RegisterData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<RegisterResponses, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/auth/register',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static authenticate<ThrowOnError extends boolean = false>(options: Options<AuthenticateData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<AuthenticateResponses, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/auth/authenticate',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static activate<ThrowOnError extends boolean = false>(options: Options<ActivateData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<ActivateResponses, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/auth/activate-account',
            ...options
        });
    }
}